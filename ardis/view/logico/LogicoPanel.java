/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ardis.view.logico;

import ardis.view.GraphComponent;
import ardis.view.ModeloPanel;
import javax.swing.JSplitPane;

/**
 *
 * @author Davisson
 */
public class LogicoPanel extends javax.swing.JPanel implements ModeloPanel {

    /**
     * Creates new form LogicoPanel
     */
    private LogicoGraphComponent graphComponent;

    public LogicoPanel(LogicoGraphComponent graphComponent) {
        initComponents();

        setGraphComponent(graphComponent);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public LogicoGraphComponent getGraphComponent() {
        return graphComponent;
    }

    @Override
    public void setGraphComponent(GraphComponent graphComponent) {
        this.graphComponent = (LogicoGraphComponent) graphComponent;
    }

    public void init() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(graphComponent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(graphComponent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    }

    @Override
    public JSplitPane getSplitPane() {
        return null;
    }

    @Override
    public void focusGained() {
    }
    
     public void addTabela() {
        try {
            this.graphComponent.getGraph().getModel().beginUpdate();
            this.graphComponent.getGraph().insertVertex(graphComponent.getGraph().getDefaultParent(), null, "Tabela", 20, 30, 150, 200, "shape=rectangle;strokeColor=black;fillColor=white");

        } finally {
            this.graphComponent.getGraph().getModel().endUpdate();
        }
    }

    public void addColuna() {
        try {
            this.graphComponent.getGraph().getModel().beginUpdate();
            this.graphComponent.getGraph().insertVertex(graphComponent.getGraph().getDefaultParent(), null, "Coluna", 20, 30, 150, 30, "shape=rectangle;strokeColor=black;fillColor=white");

        } finally {
            this.graphComponent.getGraph().getModel().endUpdate();
        }
    }

    public void addRelacionamento1to1() {
        try {
            this.graphComponent.getGraph().getModel().beginUpdate();
            this.graphComponent.getGraph().insertVertex(graphComponent.getGraph().getDefaultParent(), null, "(1)", 20, 30, 10, 10, "shape=cardinality;strokeColor=black;fillColor=white");

        } finally {
            this.graphComponent.getGraph().getModel().endUpdate();
        }
    }

    public void addRelacionamento1toN() {
        try {
            this.graphComponent.getGraph().getModel().beginUpdate();
            this.graphComponent.getGraph().insertVertex(graphComponent.getGraph().getDefaultParent(), null, "(N)", 20, 30, 10, 10, "shape=cardinality;strokeColor=black;fillColor=white");

        } finally {
            this.graphComponent.getGraph().getModel().endUpdate();
        }
    }
}
